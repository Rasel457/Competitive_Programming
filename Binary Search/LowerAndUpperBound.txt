int lower(vector<int>&vec,int value)
{
    int lo=0,hi=vec.size()-1;
    int mid;
    while(hi-lo>1)
    {
        mid=(lo+hi)/2;
        if(vec[mid]<value)
        {
            lo=mid+1;
        }
        else{
            hi=mid;
        }
    }
    if(vec[lo]>=value)
    {
        return lo;
    }
    else if(vec[hi]>=value)
    {
        return hi;
    }
    else
    {
        return vec.size();
    }
}
-----------------------------------------------------------------------------
int higher(vector<int>&vec,int value)
{
    int lo=0,hi=vec.size()-1;
    int mid;
    while(hi-lo>1)
    {
        mid=(lo+hi)/2;
        if(vec[mid]<=value)
        {
            lo=mid+1;
        }
        else{
            hi=mid;
        }
    }
    if(vec[lo]>value)
    {
        return lo;
    }
    else if(vec[hi]>value)
    {
        return hi;
    }
    else
    {
        return vec.size();
    }
}
//////////////////////////////////////////////////////////////////////////
     
                      Lower Bound
int arr[N];

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    sort(arr,arr+n);
    int value;
    cin>>value;
    int l=0,r=n-1;
    int ans=INT_MAX;
    while(l<=r)
    {
        int mid=(l+r)>>1;
        if(arr[mid]>=value)
        {
            ans=min(ans,mid);
            r=mid-1;
        }
        else
        {
            l=mid+1;
        }
    }
    cout<<ans<<endl;
    return 0;

}
-------------------------------------------------------------------------------

                   Upper Bound

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double
#define endl '\n'
#define pii pair<int,int>
#define pll pair<long long, long long>
#define ff first
#define ss second
#define pb push_back
#define PI 2.0 * acos(0.0)
#define mem(a, b) memset(a, b, sizeof(a))

#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
///   *Set.find_by_order(k)  returns a pointer to the k'th element (0 indexed)
///   Set.order_of_key(k)   returns an integer equal to the number of elements STRICTLY SMALLER than 'k'
template<typename T> using orderSet = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;


ll gcd(ll a, ll b) {return __gcd(a,b);}
ll lcm(ll a, ll b) {return a*(b/gcd(a,b));}

const int N = 1e5+10;
const int MOD = 1e9+7;

int arr[N];

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

    int n;
    cin>>n;
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    sort(arr,arr+n);
    int value;
    cin>>value;
    int l=0,r=n-1;
    int ans=INT_MAX;
    while(l<=r)
    {
        int mid=(l+r)>>1;
        if(arr[mid]<=value)
        {
            l=mid+1;
        }
        else
        {
            ans=min(ans,mid);
            r=mid-1;
        }
    }
    cout<<ans<<endl;




    return 0;

}

//https://onlinejudge.org/index.php?option=onlinejudge&Itemid=8&page=show_problem&problem=1552







