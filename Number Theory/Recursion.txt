                    ## Total sum for 1 to n using Recursion

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double

int Sum(int n)
{
    if(n==0)                                                  https://gist.github.com/KT-Yeh/8973758
    {
        return 0;
    }else{
        return n+Sum(n-1);
    }
}


int main()
{
    int n;
    cin>>n;
    int res=Sum(n);
    cout<<res<<endl;
}
--------------------------------------------------------------------------------

                                    ##Fibonacci series

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double

int arr[20];

int fibonacci( int n ) {
    if( n <=1 ) return n;
    else if(arr[n]==0)
    {
        arr[n]=fibonacci( n-1 ) + fibonacci( n-2 );
    }
    return arr[n];
}
                                 
int main()
{
    int n;
    cin>>n;
    int res=fibonacci(n);
    cout<<res<<endl;
}
-----------------------------------------------------------------------------------------

6.                                      ##Factorial
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double



ll Factorial(ll n ) {
    if( n<=1 )
    {
        return 1;
    }
    else
    {
        return n*Factorial(n-1);
    }


}


int main()
{
    int n;
    cin>>n;
    int res=Factorial(n);
    cout<<res<<endl;
}
-------------------------------------------------------------------------------------
int Factorial(int i,int n ) {
    if( i==n )
    {
        return n;
    }
    else
    {
        return i*Factorial(i+1,n);
    }
}


int main()
{
    int n;
    cin>>n;
    int res=Factorial(1,n);
    cout<<res<<endl;
}
-----------------------------------------------------------------------------------------

                          ##print 1 to n using recursion
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double



void FOR(int i, int n ) {
    if( i<=n )
    {
	 
        cout<<i<<" ";
        FOR(i+1,n);
       
    }


}


int main()
{
    int n;
    cin>>n;
    FOR(1,n);
}

----------------------------------------------------------------------------------------  
                    ##print natural number increasinr and decresing order
#include<bits/stdc++.h>
using namespace std;
#define LL long long int
#define ld long double

const int N = 2e5+10;
const int M = 1e9+7;

void PrintDecInc(int n)
{
    if(n==1)
    {
        cout<<"1"<<endl;
        return;
    }
    cout<<n<<endl;
    PrintDecInc(n-1);
    cout<<n<<endl;

}



int main()
{
    int n;
    cin>>n;
    PrintDecInc(n);
}
------------------------------------------------------------------------------------
              
### A={1,3,5,7,10}
In How many ways can you pick 2 number from the set???

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double

int nCr(int n,int r)
{
    if(r==1)
    {
        return n;
    }
    if(n==r)
    {
        return 1;
    }
    return nCr(n-1,r-1)+nCr(n-1,r);
}

int main()
{
    int n;
    cin>>n;
    int res=nCr(n,2);
    cout<<res<<endl;
}
-----------------------------------------------------------------------------------------

1.
#include <iostream>
using namespace std;
const int mx=10000;

void printReversed(int pos,const int *arr,n)
{
    if(pos<n)
    {
        printReversed(pos+1,arr,n);
        cout<<arr[pos]<<" ";
    }
}

int main()
{
    
    int n;
    cin>>n;
    int arr[n+1];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    printReversed(0,arr,n);
}

2.
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double

void print(int *arr,int l,int r)
{
    if(l>r)
    {
       return;
    }
    cout<<arr[l]<<" "<<arr[r]<<endl;
    print(arr,l+1,r-1);
}

int main()
{

    int n;
    cin>>n;
    int arr[n+1];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    int l=0,r=n-1;
    print(arr,l,r);
}
--------------------------------------------------------------------------------
Given a value n,how many binary string of length n are there with no consicutive ones??

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double

int arr[100];

int stringCnt( int n ) {
    if( n==1 ) return 2;
    else if(n==2)return 3;
    else if(arr[n]==0)
    {
        arr[n]=stringCnt( n-1 ) + stringCnt( n-2 );
    }
    return arr[n];
}

int main()
{
    int n;
    cin>>n;
    int res=stringCnt(n);
    cout<<res<<endl;
}
--------------------------------------------------------------------------------------------
## There are N persons who wants to go to party.There is a constraint that any person can outer go alone or can go in pair.
Calculate the no.of ways which N person will go party?

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double

const int N = 2e5+10;
const int M = 1e9+7;

int NoOfWays(int n)
{
    if(n==1)
    {
        return 1;
    }
    else if(n==2)
    {
        return 2;
    }
    else
    {
        int a=NoOfWays(n-1);
        int b=(n-1)*NoOfWays(n-2);
        return a+b;
    }
}

int main()
{
    int n;
    cin>>n;
    int ans=NoOfWays(n);
    cout<<ans<<endl;
}
---------------------------------------------------------------------------
           ## Given a value of N,Print pattern of N rows recursively
                  * * * *
                  * * *
                  * *
                  *
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double

const int N = 2e5+10;
const int M = 1e9+7;

void Pattern(int a,int cnt)
{

    if(a==0)
    {
        return ;
    }
    if(cnt<a)
    {
        cout<<"* ";
        Pattern(a,cnt+1);
    }
    else{
        cout<<endl;
        Pattern(a-1,0);
    }


}

int main()
{
    int n;
    cin>>n;
    Pattern(n,0);

}
-----------------------------------------------------------------------------------
  ## Given a value of N,Print pattern of N rows recursively
                  * 
                  * * 
                  * * *
                  * * * *

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double

const int N = 2e5+10;
const int M = 1e9+7;

void Pattern(int a,int b,int cnt)
{

    if(a>b)
    {
        return ;
    }
    if(a>cnt)
    {
        cout<<"*";
        Pattern(a,b,cnt+1);
    }
    else{
        cout<<endl;
        Pattern(a+1,b,0);
    }


}

int main()
{
    int n;
    cin>>n;
    Pattern(1,n,0);

}
-----------------------------------------------------------------------------------------
    ## You are given a 2d matrix of dimension(n*m).you will start will from topleft cell 
      and you want to go to bottom right.at each point you can move either right or down.Print 
      and count all possible path???

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double

const int N = 2e5+10;
const int M = 1e9+7;

int n,m,total=0;

void Path(int i,int j,string osf)
{
    if(i==n-1 && j==m-1)
    {
        total+=1;
        cout<<osf<<endl;
        return;
    }
    if(i>n-1 || j>m-1)
    {
        return;
    }
    Path(i,j+1,osf+"R");//right
    Path(i+1,j,osf+"D");//left
    Path(i+1,j+1,osf+"->");//diagonal

}
int main()
{

   cin>>n>>m;
   Path(0,0,"");
   cout<<"Total Path : "<<total<<endl;

}
----------------------------------------------------------------------------------------
## There are n cells arranged in lenear fasion.you are standing 0th cell and want to reach (n-1)th cell.
at each cell you can how 6 possible jump to make.In how many ways you reach to (n-1)yh cell print the ways;

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double

const int N = 2e5+10;
const int M = 1e9+7;
void DicePath(int curr,string osf)
{
    if(curr==n-1)
    {
       cout<<osf<<endl;
       return;
    }
    if(curr>n-1)
    {
        return;
    }
    for(int i=1;i<=6;i++)
    {
        DicePath(curr+i,osf+to_string(i)+"->");
    }
    //right

}

int main()
{

   cin>>n;
   DicePath(0,"");


}

-------------------------------------------------------------------------
## you will give a value n,print the first n+1 whole numbers in lexicographical order

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double

const int N = 2e5+10;
const int M = 1e9+7;

int n;

void Lexico(int n,int i)// current number
{
    if(i>n)
    {
        return;
    }
    cout<<"i: "<<i<<endl;
    for(int j=(i==0)?1:0;j<=9;j++)
    {
        //cout<<j<<"->"<<endl;
        Lexico(n,10*i+j);
    }
}
int main()
{

   cin>>n;
   Lexico(n,0);


}
--------------------------------------------------------
## given a string with all uniqe charecter,print all possible permutation??

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double

const int N = 2e5+10;
const int M = 1e9+7;

string s;

void permute(string str,string perm)
{
    if(str.size()==0)//base case
    {
        cout<<perm<<endl;
        return;
    }

    for(int i=0;i<str.size();i++)
    {
        char ch=str[i];
        string ros=str.substr(0,i)+str.substr(i+1);
        cout<<"ros: "<<ros<<endl;
        permute(ros,perm+ch);
    }
}
int main()
{

   cin>>s;
   permute(s,"");

}
----------------------------------------------------------------------------------
## given a string with all charecter,print all possible permutation??

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double

const int N = 2e5+10;
const int M = 1e9+7;

string s;

void permute(string str,string perm)
{
    if(str.size()==0)//base case
    {
        cout<<perm<<endl;
        return;
    }
    unordered_set<char>st;
    for(int i=0;i<str.size();i++)
    {
        char ch=str[i];
        if(st.count(ch)==0)
        {
           string ros=str.substr(0,i)+str.substr(i+1);
           //cout<<"ros: "<<ros<<endl;
           st.insert(ch);
           permute(ros,perm+ch);
        }

    }
}
int main()
{

   cin>>s;
   permute(s,"");

}



