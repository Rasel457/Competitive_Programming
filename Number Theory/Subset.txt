
##                     Subset Genarate
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double
int arr[100];
int n;

void GenetareSubset(int pos,int subset[5],int subsetedukaisi)
{
    if(pos==n)
    {
        for(int i=0;i<subsetedukaisi;i++)
        {
            cout<<subset[i]<<" ";
        }
        cout<<endl;
        return;
    }
    //nibo Na
    GenetareSubset(pos+1,subset,subsetedukaisi);
    //nibo
    subset[subsetedukaisi]=arr[pos];
    subsetedukaisi++;
    GenetareSubset(pos+1,subset,subsetedukaisi);
}

int main()
{
    cin>>n;
    int ss[5];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
        ss[i]=0;
    }
    GenetareSubset(0,ss,0);


}
------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double
int arr[100];
int n;

vector<int>subset;


void GenetareSubset(int pos)
{
    if(pos==n)
    {
        for(int i:subset)
        {
            cout<<i<<" ";
        }
        cout<<endl;
        return;
    }

    //nibo Na
    GenetareSubset(pos+1);
    //nibo
    subset.push_back(arr[pos]);
    GenetareSubset(pos+1);
    subset.pop_back();
    


}

int main()
{
    cin>>n;
    //int ss[5];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
       // ss[i]=0;
    }
    //vector<int>sub;
    GenetareSubset(0);


}
----------------------------------------------------------------------------------------

##                               Find All Subset where Subset sum=M
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double
int arr[100];
int n,m;

vector<int>subset;


void GenetareSubset(int pos)
{
    int sum=0;
    if(pos==n)
    {
        for(int i:subset)
        {
            sum+=i;
        }
        if(sum==m)
        {
            for(int i:subset)
            {
                cout<<i<<" ";
            }
	    cout<<endl;
        }
       
        return;
    }

    //nibo Na
    GenetareSubset(pos+1);
    //nibo
    subset.push_back(arr[pos]);
    GenetareSubset(pos+1);
    subset.pop_back();


}

int main()
{
    cin>>n>>m;
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
       
    }
    GenetareSubset(0);


}
-----------------------------------------------------------------------------------------------------------------
or
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double
int arr[100];
int n,m;

vector<int>subset;


void GenetareSubset(int pos,int sum)
{

    if(pos==n)
    {
        if(sum==m)
        {
            for(int i:subset)
            {
                cout<<i<<" ";
            }
	        cout<<endl;
        }
        return;
    }

    //nibo Na
    GenetareSubset(pos+1,sum);
    //nibo
    sum+=arr[pos];
    subset.push_back(arr[pos]);
    GenetareSubset(pos+1,sum);
    sum-=arr[pos];
    subset.pop_back();


}

int main()
{
    cin>>n>>m;
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];

    }
    GenetareSubset(0,0);


}
---------------------------------------------------------------------------------
                      Find One Subset where Subset sum=M
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double
int arr[100];
int n,m;

vector<int>subset;


bool GenetareSubset(int pos,int sum)
{

    if(pos==n)
    {
        if(sum==m)
        {
            for(int i:subset)
            {
                cout<<i<<" ";
            }
	        cout<<endl;
	        return true;
        }
        return false;
    }

    //nibo Na
    if(GenetareSubset(pos+1,sum)==true)
    {
        return true;
    }
    //nibo
    sum+=arr[pos];
    subset.push_back(arr[pos]);
    if(GenetareSubset(pos+1,sum)==true)return true;
    sum-=arr[pos];
    subset.pop_back();

    return false;


}

int main()
{
    cin>>n>>m;
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];

    }
    GenetareSubset(0,0);


}

---------------------------------------------------------------------------------
                      How many subset where subset sum=M
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double

int arr[20];
int n,m;
vector<int>subset;


int GenetareSubset(int pos)
{
    int sum=0;
    if(pos==n)
    {
        for(int i:subset)
        {
            sum+=i;
        }
        if(sum==m)
        {
            return 1;
        }
        else
        {
            return 0;
        }


    }

    //nibo Na
    int x=GenetareSubset(pos+1);
    //nibo
    subset.push_back(arr[pos]);
    int y=GenetareSubset(pos+1);
    subset.pop_back();
    return x+y;


}

int main()
{
    cin>>n>>m;
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];

    }
    int ans=GenetareSubset(0);
    cout<<ans<<endl;


}

---------------------------------------------------------------------------------
or
#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double
int arr[100];
int n,m;

vector<int>subset;


int  GenetareSubset(int pos,int sum)
{
    if(pos==n)
    {
        return (sum==m);
    }
    //nibo Na
    int x=GenetareSubset(pos+1,sum);
    //nibo
    sum+=arr[pos];
    int y=GenetareSubset(pos+1,sum);
    sum-=arr[pos];

    return x+y;


}

int main()
{
    cin>>n>>m;
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];

    }
    cout<<GenetareSubset(0,0);    
    return 0;
}

---------------------------------------------------------------------------------
##                   Find all subset where subset sum is even/odd

#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double
int arr[100];
int n,m;

vector<int>subset;


void GenetareSubset(int pos)
{
    int sum=0;
    if(pos==n)
    {
        for(int i:subset)
        {
            sum+=i;
        }
        if(sum%2!=0)
        {
            for(int i:subset)
            {
                cout<<i<<" ";
            }
            cout<<endl;
        }
        //cout<<endl;
        return;
    }

    //nibo Na
    GenetareSubset(pos+1);
    //nibo
    subset.push_back(arr[pos]);
    GenetareSubset(pos+1);
    subset.pop_back();


}

int main()
{
    cin>>n;
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];

    }
    GenetareSubset(0);


}
